####################################################################################
# Create files that will be used in the MATLAB script for trees creation from clusters
# Take big clusters and based exclusively on the positions present in each cluster
# create a tree of all samples
# Exclude strains with no mutations at all positions in the cluster.
# Produces two files: strain names and similarity matrix.
####################################################################################

import numpy as np
import pandas as pd
import re


# Read in the SNP data
data = pd.read_csv('../data/snp_data_2020.csv', index_col=0)

# Index = names of bacterial samples
data_index = data.index.values.tolist()
data_positions = data.columns.tolist()


cluster_477_order_no_missing = ['PB41', 'CGTACTAG-TAGATCGC', 'PB57', 'PB58', 'PB60', 'PB11', 'PB51', 'PB75', 'TCCTGAGC-CTCTCTAT', 'TCCTGAGC-TAGATCGC', 'PB73', 'PB87', 'PB40', 'GGACTCCT-CTAAGCCT', 'GGACTCCT-GTAAGGAG', 'GGACTCCT-AGAGTAGA', 'PB80', 'AAGAGGCA-TAGATCGC','PB39','PB_8','PB64','AAGAGGCA-AAGGAGTA','PB24','PB55','PB47','PB32','AAGAGGCA-GTAAGGAG','PB16','AAGAGGCA-CTAAGCCT','AAGAGGCA-CTCTCTAT','PB48','GGACTCCT-TAGATCGC','GGACTCCT-ACTGCATA', 'PB77','PB69','TAAGGCGA-TATCCTCT','PB13','PB85','PB37','PB_5','PB28', 'PB61','PB67','PB52','PB44','AGGCAGAA-AGAGTAGA','PB59','PB26','PB34','PB45','PB36','CAGAGAGG-GTAAGGAG','CAGAGAGG-AGAGTAGA','CAGAGAGG-ACTGCATA','CAGAGAGG-TAGATCGC','GTAGAGGA-CTAAGCCT','CTCTCTAC-ACTGCATA','CTCTCTAC-AGAGTAGA','CTCTCTAC-CTAAGCCT','CTCTCTAC-CTCTCTAT','CTCTCTAC-TATCCTCT','CTCTCTAC-TAGATCGC','CAGAGAGG-TATCCTCT','CAGAGAGG-CTCTCTAT','CAGAGAGG-AAGGAGTA','CAGAGAGG-CTAAGCCT','CTCTCTAC-AAGGAGTA','CTCTCTAC-GTAAGGAG','PB20']
high_freq_F_clade_loci = ['6313', '12217', '54040', '142442', '144513', '154558', '174030', '180534', '181102', '245406', '289889', '289919', '292685', '361130', '361305', '361748', '364122', '370805', '371925', '386403', '386455', '389115', '395199', '409451', '425329', '426665', '428251', '430617', '474996', '483528', '487388', '492072', '495979', '496773', '515443', '531511', '531819', '559315', '560742', '568507', '569637', '623105', '641901', '649783', '758683', '811293', '812622', '813505', '814242', '815160', '816981', '1165580', '1340522', '1354514', '1363896', '1387970', '1442330', '1475886', '1476462', '1476531', '1476558', '1476592', '1476751', '1477532', '1478331', '1478469', '1478506', '1478530', '1478645', '1479407', '1480091', '1480491', '1480525', '1480966', '1595676', '1626179', '1627487', '1627699', '1628307', '1633667', '1636629', '1637673', '1649882', '1669837', '1675126', '1677419', '1689358', '1891385', '2046611', '2048417', '2051090', '2064284', '2128696', '2129220', '2236930', '2422025', '2422187', '2425385', '2425433', '2427178', '2458513', '2467364', '2471124', '2471185', '2473081', '2492005', '2493838', '2507243', '2541813', '2542100', '2542169', '2545788', '2546472', '2588240', '2588652', '2590972', '2616945', '2617143', '2629286', '2636515', '2639176', '2647047', '2647940', '2648058', '2648373', '2648808', '2649830', '2655413', '2657585', '2661399', '2661477', '2662655', '2664696', '2667061', '2667723', '2673557', '2720744', '2723988', '2772199', '2774732', '2774899', '2775392', '2775744', '2775756', '2776472', '2777368', '2778223', '2780907', '2781058', '2781415', '2783479', '2789187', '2818812', '2819789', '2825895', '2828874', '2829910', '2830491', '2831767', '2832926', '2833133', '2836594', '2836816', '2836822', '2837082', '2840718', '2848697', '2854573', '2914121', '2947313', '2952088', '2988062', '2988737', '2989125', '2990644', '2990863', '2990878', '2991196', '2992870', '2992948', '2995016', '3006325', '3124534', '3124599', '3125602', '3147935', '3148854', '3151790', '3169760', '3169857', '3170448', '3170483', '3172776', '3175590', '3177239', '3214567', '3214776', '3227654', '3258970', '3261218', '3279360', '3282384', '3283947', '3284065', '3284124', '3284201', '3284373', '3284382', '3290550', '3290978', '3291227', '3291900', '3294262', '3294328', '3294454', '3295390', '3297364', '3298625', '3298753', '3298877', '3303587', '3340201', '3344220', '3389970', '3404416', '3404449', '3406928', '3409772', '3412784', '3451636', '3487802', '3489916', '3490977', '3491300', '3494675', '3494788', '3498981', '3533631', '3551492', '3554146', '3567249', '3567479', '3578350', '3640613', '3652777', '3722213', '3726327', '3732010', '3732266', '3742747', '3749235', '3751434', '3756460', '3757984', '3759637', '3780295', '3780606', '3781320', '3782152', '3782652', '3796460', '3801863', '3801887', '3801973', '3801984', '3802160', '3803200', '3805801', '3806247', '3806292', '3808323', '3812034', '3813674', '3816396', '3817142', '3818099', '3818950', '3822186', '3934107', '4018745', '4020396', '4024954', '4026113', '4026177', '4032626', '4032902', '4034601', '4040052', '4045295', '4055205', '4060379', '4104967', '4119668', '4119999', '4123415', '4125256', '4239326', '4242396', '4244048', '4244410', '4244457', '4244471', '4244480', '4249970', '4249975', '4254032', '4259220', '4263612', '4267316', '4267679', '4273991', '4275071', '4276533', '4277209', '4277982', '4278120', '4280532', '4285927', '4290170', '4321409', '4323855', '4338225', '4338470', '4363925', '4368418', '4394162', '4416494', '4416503', '4416524', '4416570', '4416632', '4416725', '4416736', '4416983', '4417007', '4417034', '4417040', '4452730', '4562755', '4566913', '4566938', '4567731', '4568948', '4576376', '4576680', '4612839', '4619947', '4624373', '4625959', '4625969', '4627720', '4628184', '4628189', '4629242', '4629459', '4630239', '4630362', '4630426', '4630852', '4630922', '4630988', '4632939', '4633300', '4633504', '4633509', '4636285', '4636495', '4637352', '4637891', '4638181', '4638191', '4638224', '4638230', '4638237', '4638291', '4638400', '4638469', '4638498', '4638707', '4638718', '4638870', '4638900', '4639093', '4639323', '4639344', '4640337', '4640496', '4640830', '4640840', '4702329', '4711795', '4712243', '4712305', '4713533', '4714474', '4714510', '4796144', '4821377', '4898541', '4899583', '5323065', '5324757', '5327593', '5328865', '5329934', '5330290', '5332865', '5395794', '5397432', '5413687', '5442821', '5452140', '5460184', '5461059', '5463303', '5464474', '5465014', '5465736', '5465970', '5468502', '5468675', '5470157', '5471442', '5474448', '5475344', '5476428', '5476439', '5476570', '5476613', '5485282', '5486968', '5487921', '5489019', '5489570', '5494679', '5494690', '5499440', '5500714', '5501019', '5505410', '5589398', '5604950', '5626098', '5627315', '5636686', '5783168', '5793492', '5795891', '5806925', '5821779', '5873637', '5875644', '5880292', '5894630', '5898418', '5898778', '5900059', '5901073', '5902388', '5903650', '5903722', '5903730', '6012569', '6029527', '6085646', '6086748', '6091570', '6096258', '6096762', '6099919', '6100406', '6100614', '6104551', '6104692', '6110071', '6111121', '6111287', '6112692', '6114402', '6119171', '6120616', '6125250', '6127154', '6127596', '6128348', '6128807', '6140429', '6143730', '6233390', '6235107', '6236787', '6238374', '6238947', '6239091', '6239304', '6289510', '6310743', '6310836', '6316738', '6321965', '6338261', '6341848', '6341883', '6343039', '6363974', '6365298', '6369615', '6370559', '6387152', '6438245', '6439007', '6449009', '6468880', '6665923', '6682588', '6682650', '6682877', '6682982', '6849317', '6914278', '6916334', '6931710', '7018827', '7023391', '7031043', '7031634', '7039306', '7149773', '7153260', '7172614', '7182676', '7186749', '7198017', '7222507', '7225685', '7232620', '7288180', '7289449', '7296857', '7297467', '7303645', '7306901', '7309780', '7309905', '7310252', '7310699', '7318633', '7334681', '7335817', '7335823', '7355330', '7357672', '7361037', '7361902', '7363077', '7363913', '7370665', '7372531', '7373079', '7374050', '7374838', '7375009', '7377598', '7377744', '7377780', '7380956', '7381331', '7381520', '7381658', '7381697', '7381718', '7381772', '7381777', '7381802', '7382221', '7382251', '7382324', '7382503', '7525950', '7528446', '7533376', '7601437', '7604277', '7605063', '7617120', '7619363', '7624420', '7634490', '7634991', '7643134', '7643155', '7643565', '7644722', '7697022', '7697027', '7699160', '7699425', '7699460', '7699817', '7699859', '7705441', '7707005', '7713491', '7716011', '7716728', '7717861', '7717869', '7718458', '7722801', '7728799', '7745513', '7746587', '7748417', '7748438', '7748538', '7763790', '7764762', '7765633', '7766791', '7769079', '7772168', '7772175', '7772191', '7773895', '7784122', '7787151', '7789555', '7791600', '7793537', '7793795', '7797051', '7799178', '7803853', '7804044', '7808365', '7810848', '7812440', '7897715', '7910375', '7912475', '7918054', '7922520', '7923277', '7928068', '7929849', '7937056', '7938211', '7938556', '7939428', '7941886', '7942892', '7948412']
f_clade_strains = ['PB63','AAGAGGCA-AGAGTAGA','AAGAGGCA-ACTGCATA','GCTACGCT-GTAAGGAG','PB55','PB31','AAGAGGCA-TATCCTCT','PB24','PB87','AAGAGGCA-AAGGAGTA','PB40','PB_8','PB80','PB39','PB47','PB48','AAGAGGCA-GTAAGGAG','PB16','PB32','GCTACGCT-ACTGCATA','PB64','AAGAGGCA-CTCTCTAT','AAGAGGCA-TAGATCGC','AAGAGGCA-CTAAGCCT']

counter = 0
# Read in the clusters, look only at the five biggest ones
with open('../data/conditional_probability_data/conditional_prob_1_clusters.txt', 'r') as f:
	for line in f:
		counter += 1
		positions = re.findall(r'\d+', line)
		cluster_name = 'Cluster_' + str(counter) + '_' + str(len(positions))
		strain_data = {}
		
		# Disregard small clusters
		if len(positions) < 10:
			continue

		positions = high_freq_F_clade_loci			# Make a tree based on only high frequency F clade loci
		positions = [int(i) for i in positions]
		positions.sort()

		# Find the indicies for the positions in the dataframe
		pos_index = [data_positions.index(str(i)) for i in positions]

		# Create vector for each strain that contain positions only present in a particular cluster
		# Create strain_haplotypes for the positions in the cluster
		for strain in f_clade_strains:
			strain_positions = []
			ns_num = 0

			for i in pos_index:
				snp = data.loc[strain].values[i]
				value = 0.5 if np.isnan(snp) else snp
				if value == 0.5:
					ns_num += 1

				strain_positions.append(value)
			name = strain + '_' + str(ns_num)

			if sum(np.array(strain_positions)==1): # Check for strains that have at least 1 mutation
				ns_num = float(sum(np.array(strain_positions)==0.5))
				if ns_num/len(strain_positions) < 0.8:   # Get rid of strains with a lot of missing data
					strain_data[name] = strain_positions
		
		# Add an out group to the strain data
		strain_data['outgroup'] = [0]*len(positions)

		# Create a difference matrix where nans are considered 0.5 (treat it probabilistically)
		index = list(strain_data.keys())
		index.sort()
		sim_df = pd.DataFrame(index=index)
		for s1 in index:
			a = np.array(strain_data[s1])
			col_a = []
			for s2 in index:
				b = np.array(strain_data[s2])

				difference = sum(np.square(a-b))
				difference = difference / float(len(a))
				col_a.append(difference)
			sim_df[s1] = col_a

		matlab_data = []
		for i in range(0, len(index)):
			for j in range(i+1, len(index)):
				temp = (sim_df.loc[index[j],index[i]])
				matlab_data.append(temp)
		
		matlab_data = [str(i) for i in matlab_data]
		cluster_name = 'high_freq_F_clade_F_strains_only'   			# Change name to high frequency F clade loci
		out1 = open(cluster_name+'_names.csv','w')
		out2 = open(cluster_name+'_values.csv', 'w')
		print(cluster_name)
		out1.write(','.join(index))
		out2.write(','.join(matlab_data))
		out1.close()
		out2.close()


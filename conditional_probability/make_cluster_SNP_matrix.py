################################################################
# Create a SNP matrix based on the cluster positions (columns) 
# and the order based on the cluster tree (strains as rows)
# Save the matrix as a CSV.
################################################################

import pandas as pd
import numpy as np
import re

def make_matrix(positions, strain_order, data):
# Make a dataframe that has data on the particular loci and strains specified.

	# original strain order used for looking up a right data point in the array.
	og_strain_order = ['PB63', 'PB28', 'GGACTCCT-AGAGTAGA', 'AAGAGGCA-AGAGTAGA', 'PB73', 'PB76', 'AAGAGGCA-ACTGCATA', 'GGACTCCT-GTAAGGAG', 'GCTACGCT-GTAAGGAG', 'TCCTGAGC-CTCTCTAT', 'PB55', 'PB_5', 'PB31', 'AAGAGGCA-TATCCTCT', 'PB24', 'PB87', 'AAGAGGCA-AAGGAGTA', 'PB84', 'PB40', 'AGGCAGAA-ACTGCATA', 'AGGCAGAA-CTAAGCCT', 'PB67', 'PB_8', 'PB80', 'PB39', 'PB47', 'PB59', 'PB37', 'PB61', 'TCCTGAGC-TAGATCGC', 'PB77', 'PB69', 'TAAGGCGA-AAGGAGTA', 'PB13', 'PB82', 'PB48', 'PB52', 'GGACTCCT-TAGATCGC', 'PB11', 'GGACTCCT-CTAAGCCT', 'PB44', 'PB36', 'AAGAGGCA-GTAAGGAG', 'PB16', 'PB32', 'PB20', 'GCTACGCT-ACTGCATA', 'PB85', 'PB65', 'PB58', 'PB64', 'CTCTCTAC-GTAAGGAG', 'PB60', 'TAAGGCGA-GTAAGGAG', 'AGGCAGAA-GTAAGGAG', 'PB21', 'TAAGGCGA-TATCCTCT', 'AAGAGGCA-CTCTCTAT', 'PB78', 'PB_1', 'PB91', 'AAGAGGCA-TAGATCGC', 'CTCTCTAC-AAGGAGTA', 'GTAGAGGA-ACTGCATA', 'CAGAGAGG-AAGGAGTA', 'CTCTCTAC-AGAGTAGA', 'GTAGAGGA-GTAAGGAG', 'PB43', 'PB34', 'AAGAGGCA-CTAAGCCT', 'PB92', 'CTCTCTAC-TATCCTCT', 'AGGCAGAA-AAGGAGTA', 'PB90', 'PB12', 'CAGAGAGG-TATCCTCT', 'PB18', 'PB26', 'GTAGAGGA-AAGGAGTA', 'PB41', 'AGGCAGAA-AGAGTAGA', 'PB75', 'PB45', 'CAGAGAGG-TAGATCGC', 'TAAGGCGA-AGAGTAGA', 'CAGAGAGG-GTAAGGAG', 'PB17', 'CAGAGAGG-ACTGCATA', 'CTCTCTAC-CTCTCTAT', 'PB51', 'CGTACTAG-AGAGTAGA', 'PB66', 'PB25', 'PB83', 'CGTACTAG-CTAAGCCT', 'CTCTCTAC-TAGATCGC', 'TCCTGAGC-AAGGAGTA', 'CAGAGAGG-AGAGTAGA', 'PB_3', 'AGGCAGAA-CTCTCTAT', 'CAGAGAGG-CTAAGCCT', 'TAAGGCGA-TAGATCGC', 'PB81', 'CGTACTAG-ACTGCATA', 'CGTACTAG-AAGGAGTA', 'PB89', 'TAAGGCGA-ACTGCATA', 'PB74', 'CTCTCTAC-ACTGCATA', 'PB57', 'PB49', 'GTAGAGGA-CTAAGCCT', 'CGTACTAG-CTCTCTAT', 'GTAGAGGA-CTCTCTAT', 'PB_9', 'PB_4', 'GTAGAGGA-AGAGTAGA', 'GTAGAGGA-TATCCTCT', 'PB29', 'PB10', 'PB_2', 'AGGCAGAA-TAGATCGC', 'CGTACTAG-TATCCTCT', 'PB53', 'GGACTCCT-ACTGCATA', 'PB19', 'CTCTCTAC-CTAAGCCT', 'TCCTGAGC-AGAGTAGA', 'CAGAGAGG-CTCTCTAT', 'PB35', 'PB27', 'GTAGAGGA-TAGATCGC', 'CGTACTAG-TAGATCGC', 'TCCTGAGC-CTAAGCCT', 'TAAGGCGA-CTAAGCCT', 'TCCTGAGC-TATCCTCT', 'PB42', 'TCCTGAGC-GTAAGGAG', 'TAAGGCGA-CTCTCTAT', 'TCCTGAGC-ACTGCATA', 'AGGCAGAA-TATCCTCT', 'CGTACTAG-GTAAGGAG']

	# Create a dataframe to store info about snps in cluster strains
	df = pd.DataFrame(index=strain_order)
	for i in positions:
		col = []
		for j in strain_order:
			col.append(data[str(i)][og_strain_order.index(j)])
		df[i] = col

	return(df)


# Make SNP matrix based on the tree.

# Cluster order
# Define strain order in the tree for each particular cluster we're interested in.
cluster_477_order = ['PB41', 'CGTACTAG-TAGATCGC', 'PB57', 'PB58', 'PB60', 'PB11', 'PB51', 'PB75', 'TCCTGAGC-CTCTCTAT', 'TCCTGAGC-TAGATCGC', 'PB73', 'PB87', 'PB40', 'GGACTCCT-CTAAGCCT', 'GGACTCCT-GTAAGGAG', 'GGACTCCT-AGAGTAGA', 'PB80', 'AAGAGGCA-TATCCTCT', 'AAGAGGCA-TAGATCGC','PB63','PB39','PB_8','PB64','AAGAGGCA-AGAGTAGA','GCTACGCT-GTAAGGAG','AAGAGGCA-ACTGCATA','AAGAGGCA-AAGGAGTA','PB24','PB31','PB55','PB47','PB32','AAGAGGCA-GTAAGGAG','PB16','AAGAGGCA-CTAAGCCT','AAGAGGCA-CTCTCTAT','PB48','GGACTCCT-TAGATCGC','GGACTCCT-ACTGCATA', 'PB77','PB69','AGGCAGAA-CTAAGCCT','AGGCAGAA-ACTGCATA','TAAGGCGA-TATCCTCT','PB13','PB85','PB37','PB_5','PB28','PB76','PB78', 'PB61','PB67','PB52','PB44','AGGCAGAA-AGAGTAGA','PB59','PB26','PB34','PB45','PB36','CAGAGAGG-GTAAGGAG','CAGAGAGG-AGAGTAGA','CAGAGAGG-ACTGCATA','CAGAGAGG-TAGATCGC','GTAGAGGA-CTAAGCCT','CTCTCTAC-ACTGCATA','CTCTCTAC-AGAGTAGA','CTCTCTAC-CTAAGCCT','CTCTCTAC-CTCTCTAT','CTCTCTAC-TATCCTCT','CTCTCTAC-TAGATCGC','CAGAGAGG-TATCCTCT','CAGAGAGG-CTCTCTAT','CAGAGAGG-AAGGAGTA','CAGAGAGG-CTAAGCCT','CTCTCTAC-AAGGAGTA','CTCTCTAC-GTAAGGAG','PB20']
cluster_477_order_nolowcoverage = ['GGACTCCT-CTAAGCCT','GGACTCCT-GTAAGGAG','GGACTCCT-AGAGTAGA','TCCTGAGC-CTCTCTAT','TCCTGAGC-TAGATCGC','PB73','PB87','PB40','PB80','AAGAGGCA-TAGATCGC','PB_8','PB39','PB64','PB24','AAGAGGCA-AAGGAGTA','PB55','PB32','AAGAGGCA-GTAAGGAG','PB16','AAGAGGCA-CTAAGCCT','AAGAGGCA-CTCTCTAT','PB47','PB48','GGACTCCT-TAGATCGC','GGACTCCT-ACTGCATA','PB77','PB69','PB13','PB85','PB37','PB_5','PB28','PB44','TAAGGCGA-TATCCTCT','PB52','PB67','PB36','AGGCAGAA-AGAGTAGA','PB59','CAGAGAGG-AAGGAGTA','CAGAGAGG-CTAAGCCT','CTCTCTAC-AAGGAGTA','CAGAGAGG-GTAAGGAG','CAGAGAGG-AGAGTAGA','CAGAGAGG-ACTGCATA','CAGAGAGG-TAGATCGC','GTAGAGGA-CTAAGCCT','CTCTCTAC-ACTGCATA','CTCTCTAC-AGAGTAGA','CTCTCTAC-CTAAGCCT','CTCTCTAC-CTCTCTAT','CTCTCTAC-TAGATCGC','CAGAGAGG-TATCCTCT','CAGAGAGG-CTCTCTAT','CTCTCTAC-TATCCTCT','CTCTCTAC-GTAAGGAG','PB26','PB34','PB45','PB61','PB20','PB58','PB60','PB11','PB51','PB75','PB57','PB41','CGTACTAG-TAGATCGC']
cluster_3423_order = ['PB_9','PB43','AGGCAGAA-CTCTCTAT','PB12','PB66','TAAGGCGA-AGAGTAGA','PB_1','PB92','PB90','PB21','PB18','PB35','TCCTGAGC-ACTGCATA','PB42','TCCTGAGC-CTAAGCCT','TCCTGAGC-AGAGTAGA','GTAGAGGA-CTCTCTAT','TCCTGAGC-TATCCTCT','CGTACTAG-ACTGCATA','CGTACTAG-GTAAGGAG','PB75','TCCTGAGC-AAGGAGTA','GTAGAGGA-GTAAGGAG','AAGAGGCA-TATCCTCT','PB87','PB40','GGACTCCT-AGAGTAGA','GGACTCCT-GTAAGGAG','GGACTCCT-CTAAGCCT','TCCTGAGC-TAGATCGC','TCCTGAGC-CTCTCTAT','PB73','PB80','PB63','AAGAGGCA-TAGATCGC','PB39','PB_8','GCTACGCT-GTAAGGAG','PB24','PB55','AAGAGGCA-ACTGCATA','AAGAGGCA-AGAGTAGA','AAGAGGCA-GTAAGGAG','AAGAGGCA-AAGGAGTA','GCTACGCT-ACTGCATA','PB31','AAGAGGCA-CTAAGCCT','AAGAGGCA-CTCTCTAT','PB32','PB16','PB47','PB48','PB64','AGGCAGAA-ACTGCATA','AGGCAGAA-CTAAGCCT','TAAGGCGA-TATCCTCT','PB78','PB61','GGACTCCT-ACTGCATA','GGACTCCT-TAGATCGC','PB45','PB77','PB69','PB_5','PB37','PB13','PB85','PB28','PB67','PB76','PB59','PB52','PB84','TAAGGCGA-AAGGAGTA','PB26','PB34','PB11','CTCTCTAC-AAGGAGTA','GTAGAGGA-CTAAGCCT','CTCTCTAC-CTAAGCCT','CTCTCTAC-CTCTCTAT','CTCTCTAC-TAGATCGC','CTCTCTAC-ACTGCATA','CAGAGAGG-TAGATCGC','CAGAGAGG-CTAAGCCT','CAGAGAGG-GTAAGGAG','CTCTCTAC-TATCCTCT','CAGAGAGG-ACTGCATA','CAGAGAGG-AGAGTAGA','CAGAGAGG-TATCCTCT','CAGAGAGG-AAGGAGTA','CTCTCTAC-AGAGTAGA','CTCTCTAC-GTAAGGAG', 'PB44', 'PB36', 'PB58','PB82','PB20','PB60','PB_3','PB51','PB_2','PB25','CGTACTAG-CTCTCTAT','PB41','CGTACTAG-TAGATCGC','PB57']

# Define sizes of the clusters and the list of strain orders to process.
sizes = [477,3423]
order = [cluster_477_order,cluster_3423_order]
data = np.load('../data/pos_SNPs.npy',allow_pickle='TRUE').item()


# Read in the positions that make up each cluster
for s in range(0, len(sizes)):
	with open('../data/conditional_probability_data/clusters_fixed.txt', 'r') as f:
		for line in f:
			positions = re.findall(r'\d+', line)

			positions = [int(i) for i in positions]
			positions.sort()
			
			if len(positions) == sizes[s]: 
				df = make_matrix(positions, order[s], data)
	
	# Save the cluster matrix to a CSV file.
	file = '../data/snp_matrices_csv_files/cluster_' + str(sizes[s]) + '_ordered_strain_snps_fixed_nolowcoverage.csv'
	df.to_csv(file)


############################################################################
# Make a SNP matrix based on all high frequency positions in one chromosomal region.


cluster_477_order_nolowcoverage = ['GGACTCCT-CTAAGCCT','GGACTCCT-GTAAGGAG','GGACTCCT-AGAGTAGA','TCCTGAGC-CTCTCTAT','TCCTGAGC-TAGATCGC','PB73','PB87','PB40','PB80','AAGAGGCA-TAGATCGC','PB_8','PB39','PB64','PB24','AAGAGGCA-AAGGAGTA','PB55','PB32','AAGAGGCA-GTAAGGAG','PB16','AAGAGGCA-CTAAGCCT','AAGAGGCA-CTCTCTAT','PB47','PB48','GGACTCCT-TAGATCGC','GGACTCCT-ACTGCATA','PB77','PB69','PB13','PB85','PB37','PB_5','PB28','PB44','TAAGGCGA-TATCCTCT','PB52','PB67','PB36','AGGCAGAA-AGAGTAGA','PB59','CAGAGAGG-AAGGAGTA','CAGAGAGG-CTAAGCCT','CTCTCTAC-AAGGAGTA','CAGAGAGG-GTAAGGAG','CAGAGAGG-AGAGTAGA','CAGAGAGG-ACTGCATA','CAGAGAGG-TAGATCGC','GTAGAGGA-CTAAGCCT','CTCTCTAC-ACTGCATA','CTCTCTAC-AGAGTAGA','CTCTCTAC-CTAAGCCT','CTCTCTAC-CTCTCTAT','CTCTCTAC-TAGATCGC','CAGAGAGG-TATCCTCT','CAGAGAGG-CTCTCTAT','CTCTCTAC-TATCCTCT','CTCTCTAC-GTAAGGAG','PB26','PB34','PB45','PB61','PB20','PB58','PB60','PB11','PB51','PB75','PB57','PB41','CGTACTAG-TAGATCGC']
# Load the data on positions and SNP arrays. 
data = np.load('../data/pos_SNPs.npy',allow_pickle='TRUE').item()
start, end = 6262, 670606		# Specify the region of the chromosome.

# Read in all SNP positions that make up a particular chromosomal region
positions = []
for pos in data.keys():
	# Collect SNP loci that are in the particular region 
	if int(pos)>=start and int(pos)<=end:
		snp_data = np.array(data[pos])
		count = sum(snp_data==1)
		if count >= 4:
			positions.append(int(pos))


# Create a matrix for defined loci and strains
df = make_matrix(positions, cluster_477_order_nolowcoverage, data)

# Save the matrix into csv file	
file = '../data/snp_matrices_csv_files/477_region_all_loci_ordered_strain_snps_fixed_4plus.csv'
df.to_csv(file)